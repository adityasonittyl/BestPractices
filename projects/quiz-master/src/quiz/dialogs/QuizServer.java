/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * QuizServer.java
 *
 * Created on Apr 30, 2011, 8:54:23 PM
 */
package quiz.dialogs;

import com.google.gson.JsonSyntaxException;
import com.google.gson.reflect.TypeToken;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import quiz.core.Question;
import quiz.core.Server;
import quiz.gui.Dialogs;
import quiz.util.GsonHelper;

/**
 *
 * @author higor
 */
public class QuizServer extends javax.swing.JFrame {

    private static final java.lang.reflect.Type questionListType = new TypeToken<List<Question>>() { }.getType();
    private List<Question> questions;
    private QuizMain parent;
    private Server server;
    private Thread thread;
    private boolean running = false;

    /** Creates new form QuizServer */
    public QuizServer(QuizMain parent) {
        super();

        initComponents();
        this.parent = parent;
    }

    public void showDialog() {
        parent.setVisible(false);
        parent.removeNotify();
        setLocationRelativeTo(null);
        setVisible(true);
        addNotify();
    }

    private void connect() {
        setLocationRelativeTo(null);
        
        try {
            this.server = new Server(9595);
            this.thread = new Thread(this.server);

            server.setQuestions(questions);
            
            this.thread.start();
        } catch (IOException ex) {
            Logger.getLogger(QuizServer.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    private void disconnect() {
        if (thread == null) {
            return;
        }
        //server.close();
        thread.interrupt();
        //thread.interrupt();
        server = null;
        thread = null;
    }

    private void refreshUi() {
        if (questions != null) {
            questionLabel.setText(String.valueOf(questions.size()));
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        questionLabel = new javax.swing.JLabel();
        loadButton = new javax.swing.JButton();
        runButton = new javax.swing.JToggleButton();
        backButton = new javax.swing.JButton();

        fileChooser.setDoubleBuffered(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Servidor");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Questões:");

        questionLabel.setText("0");

        loadButton.setText("Carregar");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        runButton.setText("Executar");
        runButton.setEnabled(false);
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        backButton.setText("Voltar");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(questionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(backButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(loadButton)
                    .addComponent(runButton, 0, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(questionLabel)
                    .addComponent(loadButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(runButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        // TODO add your handling code here:
        switch (fileChooser.showOpenDialog(this)) {
            case JFileChooser.ERROR_OPTION:
                Dialogs.error(this, "Ocorreu um erro ao tentar abrir o arquivo.");
                break;
            case JFileChooser.APPROVE_OPTION:
                File selected = fileChooser.getSelectedFile();

                if (!selected.canRead()) {
                    Dialogs.error(this, "Não é possivel ler este arquivo.");
                    break;
                }

                Reader reader;
                try {
                    reader = new FileReader(selected);

                    if (questions != null) {
                        questions.clear();
                    }

                    questions = GsonHelper.fromJson(reader, questionListType);

                    if (questions != null || !questions.isEmpty()) {
                        runButton.setEnabled(true);
                    }

                } catch (JsonSyntaxException ex) {
                    Dialogs.error(this, "Houve um erro ao carregar o arquivo:\n" + ex.getMessage());
                    Logger.getLogger(QuizServer.class.getName()).log(Level.SEVERE, null, ex);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(QuizServer.class.getName()).log(Level.SEVERE, null, ex);
                }

                refreshUi();
                break;


            default:
                break;
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        setVisible(false);
        removeNotify();
        parent.setVisible(true);
        parent.addNotify();

    }//GEN-LAST:event_formWindowClosing

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:

        setVisible(false);
        removeNotify();
        parent.setVisible(true);
        parent.addNotify();
    }//GEN-LAST:event_backButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        // TODO add your handling code here:
        if (thread != null) {
            disconnect();
            loadButton.setEnabled(true);
            backButton.setEnabled(true);
            //runButton.setVisible(false);

        } else {

            if (questions == null || questions.isEmpty()) {
                Dialogs.error(this, "Você precisa carregar algumas questões antes de iniciar o servidor.");
                runButton.setSelected(false);
                return;
            }

            connect();

            loadButton.setEnabled(false);
            backButton.setEnabled(false);

        }
    }//GEN-LAST:event_runButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton loadButton;
    private javax.swing.JLabel questionLabel;
    private javax.swing.JToggleButton runButton;
    // End of variables declaration//GEN-END:variables
}
